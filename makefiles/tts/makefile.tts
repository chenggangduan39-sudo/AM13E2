#include config.mk

SHELL=bash
pwd=${shell pwd}

###############Configure###################
use_release=1
use_share=0
dist=0
use_debug=0    #for debug log
use_cplusplus=1
#use_neon=1
use_neon3308=0

use_hts=1
use_vits=0
use_device=1
use_nn=0
use_onnx=0
use_tac=1

#decode
use_lpcnet=0
use_world=1

ifeq ($(use_vits), 1)
use_onnx=1
endif
ifeq ($(use_release), 1)
dist=1
endif

src_dir=wtk/core/cfg wtk/core/json wtk/core/math wtk/core/parse wtk/core/errno wtk/core/pitch wtk/core/rbin wtk/core/text wtk/core/segmenter wtk/os wtk/tts/parser wtk/lex wtk/tts/tts-mer/wtk-extend wtk/tts/tts-tac qtk/tts/parse qtk/tts/module qtk/tts/syn qtk/os qtk/core qtk/tts/dfsmn

ifeq ($(use_nn), 1)
src_dir+=qtk/nn
endif

ifeq ($(use_vits), 1)
src_dir+=qtk/tts/vits
endif

ifeq ($(use_device), 1)
src_dir+=qtk/tts/acoustic/devicetts
endif

ifeq ($(use_tac), 1)
src_dir+=qtk/tts/acoustic/tac2_syn qtk/tts/acoustic/durian
endif

ifeq ($(use_world), 1)
src_dir+=wtk/tts/tts-mer/world wtk/tts/tts-mer/syn wtk/tts/tts-mer/sptk wtk/tts/syn wtk/tts/tts-mer/bandmat wtk/tts/tts-mer/cfg
endif

src_c=${shell find $(src_dir) -name "*.c"}
src_c+=wtk/core/wtk_alloc.c wtk/core/wtk_arg.c wtk/core/wtk_array.c wtk/core/wtk_buf.c wtk/core/wtk_hash.c \
wtk/core/wtk_heap.c wtk/core/wtk_hoard.c wtk/core/wtk_os.c wtk/core/wtk_queue.c wtk/core/wtk_queue2.c \
wtk/core/wtk_queue3.c wtk/core/wtk_rbtree.c wtk/core/wtk_slist.c wtk/core/wtk_robin.c wtk/core/wtk_robin2.c \
wtk/core/wtk_str_hash.c wtk/core/wtk_strbuf.c wtk/core/wtk_vpool.c wtk/core/wtk_vpool2.c \
wtk/core/wtk_time.c wtk/core/wtk_wavfile.c wtk/core/wtk_treenode.c wtk/core/wtk_strpool.c wtk/core/wtk_strdict.c wtk/core/wtk_str_parser.c \
wtk/core/wtk_str_encode.c wtk/core/wtk_str.c wtk/core/wtk_stack.c wtk/core/wtk_larray.c wtk/core/wtk_fkv.c \
wtk/core/wavehdr.c wtk/core/wtk_strmsg.c wtk/core/wtk_riff.c wtk/core/wtk_bit_heap.c wtk/core/wtk_sort.c \
wtk/core/wtk_fkv2.c wtk/core/wtk_stridx.c wtk/core/wtk_kdict.c wtk/core/wtk_if.c wtk/core/fft/wtk_rfft.c wtk/core/wtk_kcls.c \
wtk/tts/cosynthesis/wtk_wsola.c wtk/tts/cosynthesis/wtk_wsola_cfg.c

src_c+=qtk/layer/qtk_nn_fc.c qtk/layer/qtk_nn_conv1d.c qtk/layer/qtk_nn_layernorm.c qtk/layer/qtk_nn_batchnorm.c qtk/layer/qtk_nn_embedding.c qtk/layer/qtk_nn_lstm.c qtk/layer/qtk_nn_bigru.c qtk/layer/qtk_nn_gru.c qtk/layer/qtk_nn_maxpool1d.c

ifeq ($(use_hts), 1)
src_c+=wtk/tts/wtk_tts.c wtk/tts/wtk_tts_cfg.c
endif
ifeq ($(use_tac), 1)
src_c+=qtk/tts/qtk_tts_tac_cfg.c qtk/tts/qtk_tts_tac.c qtk/tts/qtk_tts_tac2_lpcnet_cfg.c qtk/tts/qtk_tts_tac2_lpcnet.c qtk/tts/qtk_tts_durian_lpcnet_cfg.c qtk/tts/qtk_tts_durian_lpcnet.c 
endif

#ifeq ($(use_neon), 1)
#src_c+=wtk/asr/fextra/fnn/qlas/wtk_qlasasm.c
#endif

src_c+=qtk/soundtouch/qtk_soundtouch_cfg.c

src_c+=wtk/asr/fextra/torchnn/qtk_torchnn_cal.c


src_cpp=${shell find $(src_dir) -name "*.cpp"}

src_cpp+=third/soundtouch/source/SoundStretch/WavFile.cpp \
third/soundtouch/source/SoundStretch/RunParameters.cpp \
third/soundtouch/source/SoundTouch/AAFilter.cpp \
third/soundtouch/source/SoundTouch/BPMDetect.cpp \
third/soundtouch/source/SoundTouch/cpu_detect_x86.cpp \
third/soundtouch/source/SoundTouch/FIFOSampleBuffer.cpp \
third/soundtouch/source/SoundTouch/FIRFilter.cpp \
third/soundtouch/source/SoundTouch/InterpolateCubic.cpp \
third/soundtouch/source/SoundTouch/InterpolateLinear.cpp \
third/soundtouch/source/SoundTouch/InterpolateShannon.cpp \
third/soundtouch/source/SoundTouch/PeakFinder.cpp \
third/soundtouch/source/SoundTouch/RateTransposer.cpp \
third/soundtouch/source/SoundTouch/SoundTouch.cpp \
third/soundtouch/source/SoundTouch/sse_optimized.cpp \
third/soundtouch/source/SoundTouch/mmx_optimized.cpp \
third/soundtouch/source/SoundTouch/TDStretch.cpp \
qtk/soundtouch/qtk_soundtouch_api.cpp


exclude_dir=
exclude_c=$(foreach v, $(exclude_dir), $(shell find $(v) -name "*.c"))
exclude_c+= 
exclude_cpp=$(foreach v, $(exclude_dir), $(shell find $(v) -name "*.cpp"))


src_f_c=$(filter-out $(exclude_c),$(src_c))
c_objs=$(patsubst %.c,%.o,$(src_f_c))
src_f_cpp=$(filter-out $(exclude_cpp),$(src_cpp))
cpp_objs=$(patsubst %.cpp,%.o,$(src_f_cpp))


lib_objs=$(c_objs) $(cpp_objs)

tool_dir= #test

tool_c=$(foreach v, $(tool_dir), $(shell find $(v) -name "*.c"))
tool_c+=test/tool/tts/tts.c test/tts/tts_test.c test/tts/tac2_test.c test/tool/tts/tts_hts.c
tool_e=${patsubst %.c,%,${tool_c}}
tool_o=${patsubst %.c,%.o,${tool_c}}

tool_cpp=$(foreach v, $(tool_dir), $(shell find $(v) -name "*.cpp"))
tool_cpp_e=${patsubst %.cpp,%,${tool_cpp}}
tool_o+=${patsubst %.cpp,%.o,${tool_cpp}}
#generated tool
tool_gen=${addprefix tool/, ${notdir ${patsubst %.o, %, $(tool_o)}}}


######################### lib section #####################################
ifeq ($(use_share), 1)
lib=./lib/linux/libtts.so
else
lib=./lib/linux/libtts.a
endif

############ gprof section ###############
gprof_o=tool/tts
gprof_n=gmon.out
gprof_log=${gprof_n}.txt
grpof_dot=${gprof_n}.dot
gprof_png=${gprof_n}.png


############### compile section ###############
#bin
CC=gcc
CXX=g++
#CC=/home/dm/work/pro/3308/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc
#CXX=/home/dm/work/pro/3308/gcc-linaro-6.3.1-2017.05-x86_64_aarch64-linux-gnu/bin/aarch64-linux-gnu-gcc

#options
INC =-I. -Iwtk/tts -Iqtk -Iqtk/tts -I./wtk/tts/include -Ithird/soundtouch/include -Ithird/soundtouch/source/SoundStretch

ifeq ($(use_onnx), 1)
INC+=-I./third/onnxruntime/onnxruntime-linux-x64-1.12.1/include
LFLAGS += -lonnxruntime -L$(pwd)/third/onnxruntime/onnxruntime-linux-x64-1.12.1/lib
#LFLAGS += -Wl,-rpath='$$ORIGIN/lib'    #using when submit
LFLAGS += -Wl,-rpath=./third/onnxruntime/onnxruntime-linux-x64-1.12.1/lib              #local test
endif

ifeq ($(use_cplusplus), 1)
LFLAGS += -lstdc++
endif

ifeq (${dist}, 1)
OF=-O3 -Wno-write-strings #-pg #-ffunction-sections -fdata-sections  #-msse4 -fopenmp
else
OF=-g -Wno-write-strings #-pg #-msse4 -fopenmp
endif

#OF += -Wl,-gc-sections

ifeq ($(use_share), 1)
	DEF+=-fPIC
endif

ifeq ($(use_neon),1)
	DEF += -DUSE_NEON
endif

ifeq ($(use_neon3308), 1)
	DEF += -DUSE_NEON3308
endif

ifeq ($(use_debug),1)
	DEF += -DUSE_DEBUG
endif

ifeq ($(use_vits), 1)
	DEF += -DUSE_VITS
endif

ifeq ($(use_device), 1)
	DEF += -DUSE_DEVICE
endif

ifeq ($(use_lpcnet), 1)
	DEF += -DUSE_LPCNET
endif

ifeq ($(use_world), 1)
	DEF += -DUSE_WORLD
endif

CFLAGS+=$(OF) $(INC) $(DEF)
WFLAGS+= -Wall #-Werror

LFLAGS+=-lm -lpthread

ie=$(shell whereis libiconv|grep "so"|wc -l)
ifeq (${ie},1)
	LFLAGS += -liconv
endif

%.o:%.c
	$(CC) $(CFLAGS) ${WFLAGS} -c -o $@ $<

%.o:%.cpp
	$(CXX) $(CFLAGS) -c -o $@ $<


all:$(lib) tools
.PHONY: all clean


tools:${lib}
	for i in  ${tool_cpp_e}; \
	 	do echo $${i}; \
		if [ ! -d tool ]; then mkdir tool; fi;\
		${CXX} $(CFLAGS) -c -o $${i}.o  $${i}.cpp; \
		${CXX} $(CFLAGS) -o tool/`basename $${i}`  $${i}.o ${lib} $(LFLAGS)  ; \
	done;
	for i in  ${tool_e}; \
		do echo $${i}; \
		if [ ! -d tool ]; then mkdir tool; fi;\
		${CC} $(CFLAGS) ${WFLAGS} -c -o $${i}.o  $${i}.c; \
		${CXX} $(CFLAGS) ${WFLAGS} -o tool/`basename $${i}`  $${i}.o ${lib} $(LFLAGS) ; \
	done

$(lib): $(lib_objs)
	echo "lib="${lib}; 
	mkdir -p `dirname ${lib}`; 
	if [ $(use_share) -eq 1 ]; then \
		$(CXX) $(LDFLAGS) $(CFLAGS) -shared -o $(lib) ${lib_objs}; \
	else \
		ar rv $(lib) $(lib_objs); \
	fi


prof:
	gprof ${gprof_o} ${gprof_n} >$(gprof_log)
	python ./shell/gprof2dot.py $(gprof_log) > ${grpof_dot}
	dot -Tpng -o $(gprof_png) $(grpof_dot)


clean:
	-rm $(lib_objs) $(tool_o) $(tool_gen)

