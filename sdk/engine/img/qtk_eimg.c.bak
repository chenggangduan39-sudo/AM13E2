#include "qtk_eimg.h" 
#include "qtk/engine/comm/qtk_engine_hdr.h"

void qtk_eimg_init(qtk_eimg_t *e) {
	qtk_engine_param_init(&e->param);
	e->session = NULL;
	e->cfg = NULL;
	e->img   = NULL;
	e->notify     = NULL;
	e->notify_ths = NULL;
	e->thread   = NULL;
	e->callback = NULL;
}

int qtk_eimg_on_start(qtk_eimg_t *e);
int qtk_eimg_on_feed(qtk_eimg_t *e, char *data, int len);
int qtk_eimg_on_end(qtk_eimg_t *e);
void qtk_eimg_on_reset(qtk_eimg_t *e);
void qtk_eimg_on_set_notify(qtk_eimg_t *e, void *notify_ths, qtk_engine_notify_f notify_f);
int qtk_eimg_on_set(qtk_eimg_t *e, char *data, int bytes);
void qtk_eimg_on_img(qtk_eimg_t *e, int res, int start, int end);

qtk_eimg_t* qtk_eimg_new(qtk_session_t *session, wtk_local_cfg_t *params)
{
	qtk_eimg_t *e;
    qtk_img_thresh_cfg_t normal_thresh;
	int buf_size;
	int err = 0;
	int ret;

	e=(qtk_eimg_t*)wtk_malloc(sizeof(qtk_eimg_t));
	qtk_eimg_init(e);
	e->session = session;

	qtk_engine_param_set_session(&e->param,e->session);
	ret = qtk_engine_param_feed(&e->param,params);
	if(ret != 0) {
		wtk_log_warn0(e->session->log,"params als failed.");
		goto end;
	}

	wtk_debug("cfg: %s  use_bin = %d\n", e->param.cfg, e->param.use_bin);
	if(e->param.use_bin) {
		e->cfg = qtk_img_cfg_new_bin(e->param.cfg);
		if (!e->cfg) {
			err = 1;
		}
	} else {
		e->main_cfg = wtk_main_cfg_new_type(qtk_img_cfg, e->param.cfg);
		if (!e->main_cfg) {
			err = 1;
		}else {
			e->cfg = (qtk_img_cfg_t *)e->main_cfg->cfg;
		}
	}
	if(err == 1) {
		wtk_log_warn0(e->session->log,"cfg new failed.");
		_qtk_error(e->session,_QTK_CFG_NEW_FAILED);
		ret = -1;
		goto end;
	}
	e->img = qtk_img_rec_new(e->cfg);
	if (!e->img) {
		wtk_log_err0(e->session->log, "img new failed.");
		ret = -1;
		goto end;
	}
	normal_thresh.av_prob0 = 0.0;
	normal_thresh.avx0 = -0.5;
	normal_thresh.maxx0 = -2.0;
	normal_thresh.max_prob0 = 3.0;
	normal_thresh.av_prob1 = 4.0;
	normal_thresh.avx1 = -0.5;
	normal_thresh.maxx1 = -2.0;
	normal_thresh.max_prob1 = 6.0;
	normal_thresh.speech_dur = 2;
	qtk_img_thresh_set_cfg(e->img, normal_thresh, 0);
	qtk_img_rec_set_notify(e->img, (qtk_img_rec_notify_f)qtk_eimg_on_img, e);
	if(e->param.use_thread) {
		buf_size = 2 * 16 * e->param.winStep;
		e->callback = qtk_engine_callback_new();
		e->callback->start_f      = (qtk_engine_thread_start_f)      qtk_eimg_on_start;
		e->callback->data_f       = (qtk_engine_thread_data_f)       qtk_eimg_on_feed;
		e->callback->end_f        = (qtk_engine_thread_end_f)        qtk_eimg_on_end;
		e->callback->reset_f      = (qtk_engine_thread_reset_f)      qtk_eimg_on_reset;
		e->callback->set_notify_f = (qtk_engine_thread_set_notify_f) qtk_eimg_on_set_notify;
		e->callback->set_f        = (qtk_engine_thread_set_f)        qtk_eimg_on_set;
		e->callback->ths          = e;

		e->thread = qtk_engine_thread_new(
				e->callback,
				e->session->log,
				"eimg",
				buf_size,
				20,
				1,
				e->param.syn
				);
	}

	ret = 0;
end:
	wtk_log_log(e->session->log,"ret = %d",ret);
	if(ret != 0) {
		qtk_eimg_delete(e);
		e = NULL;
	}
	return e;
}

int qtk_eimg_delete(qtk_eimg_t *e) {
	if (e->thread) {
		qtk_engine_thread_delete(e->thread,1);
	}
	if (e->callback) {
		qtk_engine_callback_delete(e->callback);
	}
	if (e->img) {
		qtk_img_rec_delete(e->img);
		e->img = NULL;
	}
	if (e->cfg) {
		if (e->param.use_bin) {
			if (e->cfg) {
				qtk_img_cfg_delete_bin(e->cfg);
			}
		} else {
			if (e->main_cfg) {
				wtk_main_cfg_delete(e->main_cfg);
			}
		}
		e->cfg = NULL;
	}
	qtk_engine_param_clean(&e->param);

	wtk_free(e);
	return 0;
}


int qtk_eimg_on_start(qtk_eimg_t *e) {
	qtk_img_rec_start(e->img);
	return 0;
}

int qtk_eimg_on_feed(qtk_eimg_t *e,char *data,int bytes) {

	qtk_img_rec_feed(e->img, data, bytes, 0);

	return 0;
}

int qtk_eimg_on_end(qtk_eimg_t *e) {
	qtk_img_rec_feed(e->img, NULL, 0, 1);
	e->feedend = 1;
	return 0;
}

void qtk_eimg_on_reset(qtk_eimg_t *e) {
	if(e->feedend == 0){
		qtk_eimg_on_end(e);
	}
	qtk_img_rec_reset(e->img);
}

void qtk_eimg_on_set_notify(qtk_eimg_t *e, void *notify_ths, qtk_engine_notify_f notify_f) {
	e->notify_ths = notify_ths;
	e->notify     = notify_f;
}

int qtk_eimg_on_set(qtk_eimg_t *e, char *data, int bytes) {
	return 0;
}

int qtk_eimg_start(qtk_eimg_t *e) {
	int ret;

	if (e->param.use_thread) {
		qtk_engine_thread_start(e->thread);
	} else {
		qtk_eimg_on_start(e);
	}
	ret = 0;
	return ret;
}

int qtk_eimg_feed(qtk_eimg_t *e,char *data,int bytes,int is_end) {
	if(e->param.use_thread) {
		qtk_engine_thread_feed(e->thread,data,bytes,is_end);
	} else {
		if (bytes > 0) {
			qtk_eimg_on_feed(e,data,bytes);
		}
		if (is_end) {
			qtk_eimg_on_end(e);
		}
	}
	return 0;
}

int qtk_eimg_reset(qtk_eimg_t *e) {
	if (e->param.use_thread) {
		qtk_engine_thread_reset(e->thread);
	} else {
		qtk_eimg_on_reset(e);
	}

	return 0;
}

int qtk_eimg_cancel(qtk_eimg_t *e) {
	if(e->param.use_thread) {
		qtk_engine_thread_cancel(e->thread);
	}
	return 0;
}

void qtk_eimg_set_notify(qtk_eimg_t *e, void *ths, qtk_engine_notify_f notify_f) {
	if (e->param.use_thread) {
		qtk_engine_thread_set_notify(e->thread, ths, notify_f);
	} else {
		qtk_eimg_on_set_notify(e, ths, notify_f);
	}
}

int qtk_eimg_set(qtk_eimg_t *e, char *data,int bytes) {
	int ret= -1;

	if(e->param.use_thread) {
		qtk_engine_thread_set(e->thread,data,bytes);
		ret  = 0;
	} else {
		ret = qtk_eimg_on_set(e,data,bytes);
	}
	return ret;
}

void qtk_eimg_on_img(qtk_eimg_t *e, int res, int start, int end) {
	qtk_var_t var;

    // printf("%f %f\n",start*0.08,end*0.08);
	var.type = QTK_AEC_WAKE;
	if (e->notify) {
		e->notify(e->notify_ths, &var);
	}
	// qtk_img_rec_reset(e->img);
}
